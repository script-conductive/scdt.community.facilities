<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
<meta http-equiv="X-UA-Compatible" content="chrome=1, IE=edge">
<title>[%=p.base_Actor.name%]'s Journey</title>
<link href="tabulator-4.8.2.css" rel="stylesheet">
<script src="tabulator-4.8.2.js"></script>
<style type="text/css">
* {
  font-family: "Arial";
}
body {
  margin:0;
  padding: 20px;
}
.table {
  margin-bottom: 20px;
}
.header img {
  float: left;
  width: 35px;
  margin-right: 10px;
}
.header h1  {
  position: relative;
  top: 5px;
  font-size: 20px;
}
</style>
<script>
[%
var personalExpectationActors : Sequence = p.getExpectedActors();
%]
const persona = {
  name: "[%=p.base_Actor.name%]"
}

const expectedActorsMap = {
[%for(expectedActor in personalExpectationActors) {%]
  "[%=expectedActor.id%]": {
     oid: "[%=expectedActor.id%]",
     name: "[%=expectedActor.name%]",
     generalization: [
     [% for(g in expectedActor.generalization) { %]
       { oid: "[%=g.general.id%]", "name": "[%=g.general.name%]"}[%if(hasMore){%],[%}%]      
     [% } %]
     ]
   }[%if(hasMore){%],[%}%]
  
[%}%]
};
[%
var firstStateUC : UseCase = p.getFirstStageUseCase();
%]

const stageUseCases = [
  [%if (firstStateUC <> null) {%]
  {oid: "[%=firstStateUC.id%]", name: "[%=firstStateUC.name%]"},
  [%=firstStateUC.extendedByUseCases()%]
  [%}%]
];

const stageUseCasesOidMap = stageUseCases.map((s) => {
 return s.oid
});


const stagesMapTemp = {
[%for(stage in Stage.all) {%]
  "[%=stage.base_UseCase.id%]": {
    oid: "[%=stage.base_UseCase.id%]",
    name: "[%=stage.base_UseCase.name%]",
    steps: [
      [%=stage.base_UseCase.includedUseCases()%] 
    ]
  }[%if(hasMore){%],[%}%]
  
[%}%]
};

let stagesMap = {};
for (const [stageOid, stageObj] of Object.entries(stagesMapTemp)) {
  if (stageUseCasesOidMap.includes(stageOid)) {
    stagesMap[stageOid] = stageObj;
  }
}
console.log("stagesMap", stagesMap);

let relevantStagesNameMap = [];
for (const [stageOid, stageObj] of Object.entries(stagesMapTemp)) {
  if (stageUseCasesOidMap.includes(stageOid)) {
    relevantStagesNameMap.push(stageObj.name)
  }
}
console.log("relevantStagesNameMap", relevantStagesNameMap);

let irrelevantStagesNameMap = [];
for (const [stageOid, stageObj] of Object.entries(stagesMapTemp)) {
  if (!stageUseCasesOidMap.includes(stageOid)) {
    irrelevantStagesNameMap.push(stageObj.name)
  }
}

console.log("irrelevantStagesNameMap", irrelevantStagesNameMap);

const stepsMap = {
[%for(step in Step.all) {%]
  "[%=step.base_UseCase.id%]": {
    oid: "[%=step.base_UseCase.id%]",
    name: "[%=step.base_UseCase.name%]",
    usedTimeValue: "[%=step.usedTimeValue%]",
    usedTimeUnit: "[%=step.usedTimeUnit%]",
    serviceResources: [
    [%for(actor in step.base_UseCase.getDependentServiceResouceActors()) {%]
      {oid: "[%=actor.id%]", name: "[%=actor.name%]"}[%if(hasMore){%],[%}%]
      
    [%}%]
    ]
  }[%if(hasMore){%],[%}%]
  
[%}%]
};

const serviceResourcesMap = {
[%for(servRes in ServiceResource.all) {%]
  "[%=servRes.base_Actor.id%]": {
    oid: "[%=servRes.base_Actor.id%]",
    resourceType: "«[%=servRes.resourceType%]»",
  }[%if(hasMore){%],[%}%]
  
[%}%]
};

const stepTouchpointMap = {
[%for(step in Step.all) {%]
  [%if (step.base_UseCase.eContainer.type.name = "Class") {%]
  "[%=step.base_UseCase.id%]": {oid: "[%=step.base_UseCase.eContainer.id%]", name: "[%=step.base_UseCase.eContainer.name%]"}[%if(hasMore){%],[%}%]
  [%}%]
[%}%]
};

const touchpoints = [
[%for(tp in Touchpoint.all) {%]
  {oid: "[%=tp.base_Class.id%]", name: "[%=tp.base_Class.name%]", resourceType: "«[%=tp.resourceType%]»",
   usecases: [
   [%for(uc in tp.base_Class.useCase) {%]
     {oid: "[%=uc.id%]", name: "[%=uc.name%]"}[%if(hasMore){%],[%}%]
    
   [%}%]
   ]}[%if(hasMore){%],[%}%]
  
[%}%]
];

const touchpointsMap = {
[%for(tp in Touchpoint.all) {%]
  "[%=tp.base_Class.id%]": {oid: "[%=tp.base_Class.id%]", name: "[%=tp.base_Class.name%]", resourceType: "«[%=tp.resourceType%]»",}[%if(hasMore){%],[%}%]
  
[%}%]
};

</script>
</head>
<body>

<div class="menu">
[%for(p in Persona.all) {%]
<a href="[%=p.base_Actor.name%]_JourneyMap.html">[%=p.base_Actor.name%]</a>[%if(hasMore){%] | [%}%]
[%}%]
</div>
  
<div class="header">
  <a href="https://www.script-conductive.com" target="_blank">
    <img src="https://cdn.script-conductive.com/logos/logo.png" alt="logo" />
  </a>
  <h1>SCDT</h1>
</div>
<h1>[%=p.base_Actor.name%]'s Journey Map</h1>

<div id="JourneyMap" class="table"></div>

<h1>Expectation</h1>
<ul>
[%for(expectedActor in personalExpectationActors) {%]
<li>
  [%=expectedActor.name%] 
</li>
[%}%]
</ul>

<h1>Touchpoint Detail</h1>
<div id="TouchpointDetail" class="table"></div>

<script>
const height = "300px";
const layout = "fitColumns";  // fitColumns, fitDataStretch, fitDataTable

function getStepUsedTime(step) {
  return step && step.usedTimeValue > 0  ? step.usedTimeValue + " " + step.usedTimeUnit : "";
}

function getStepCurrentEmotionScore(step) {
  return step && step.currentEmotionScore ? step.currentEmotionScore : "";
}

function getStepExtraInfo(step) {
 const usedTime = getStepUsedTime(step);
 const currentEmotionScore = getStepCurrentEmotionScore(step);
 if ( (usedTime.length + currentEmotionScore.length) == 0) {
   return "";
 } else {
   return "<sup>(" + (usedTime) + (currentEmotionScore) +")</sup>";
 }
}

function getStepTouchpoint(stepOid) {
  return stepTouchpointMap.hasOwnProperty(stepOid) ? stepTouchpointMap[stepOid] : {
    oid: "",
    name: ""
  }
}
function getTouchpoint(tpOid) {
  return touchpointsMap.hasOwnProperty(tpOid) ? touchpointsMap[tpOid] : {
    oid: "UndefinedAsset",
    name: "",
    resourceType: ""
  }
}
let journeyMapTableData = [];
[%if (firstStateUC <> null) {%]
for (const [stageKey, stageObj] of Object.entries(stagesMap)) {
  if (stageUseCases.filter((u)=> u.oid == stageObj.oid).length > 0) {
    stageObj.steps.forEach((s) => {
      journeyMapTableData.push({
      id: s.oid,
      type: "Step",
      stepObject: stepsMap[s.oid],
      touchpointObject: stepTouchpointMap[s.oid],
      touchpoint: getTouchpoint(getStepTouchpoint(s.oid).oid).resourceType + " <b>" + getStepTouchpoint(s.oid).name + "</b>",
      serviceResource: stepsMap[s.oid] ? stepsMap[s.oid].serviceResources.map((r) => { 
         if (serviceResourcesMap[r.oid]) {
           return serviceResourcesMap[r.oid].resourceType + " <b>" + r.name + "</b>";
         } else {
           return "";
         } 
      }).join("\n") : "",
      [%for(stage in Stage.all) {%]
      "[%=stage.base_UseCase.name%]": 
        relevantStagesNameMap.includes("[%=stage.base_UseCase.name%]") == true && stagesMap["[%=stage.base_UseCase.id%]"].steps.filter(o => o.oid == s.oid).length > 0 
         ? "<b>" + (stepsMap[s.oid] ? stepsMap[s.oid].name : "") + "</b> " + getStepExtraInfo(stepsMap[s.oid])
         : ""[%if(hasMore){%],[%}%]
      
      [%}%]
      });
      
      for (const [dataKey, dataObj] of Object.entries(journeyMapTableData)) {
        if (irrelevantStagesNameMap.includes(dataKey)) {
          delete journeyMapTableData[dataKey];
        }
      }
      
      console.log(journeyMapTableData)
    });
  }
}
[%}%]
   
new Tabulator("#JourneyMap", {
  height: height,
  layout: layout,
  data: journeyMapTableData,
  columns:[
  	{title:"Enabling Resource", field:"serviceResource", width:250, hozAlign:"right", formatter: "html"},
  	{title:"Touchpoint", field:"touchpoint", width:140, hozAlign:"right", formatter: "html"},
    {
      title:"[%=p.base_Actor.name%]'s Journey Stages",
      columns:  stageUseCases.map((uc) => {
        return {
          title: uc.name,
          field: uc.name,
          hozAlign: "left",
          headerSort: false,
          headerVertical: false,
          formatter: "html",
          formatterParams: {
            wrap: true
          }
         } 
      })
    }
  ]
});

const touchpointDetailTableData = [];
touchpoints.forEach((tp) => {
  touchpointDetailTableData.push({
    id: tp.oid,
    type: "Touchpoint",
    [%for(tp in Touchpoint.all) {%]
    "[%=tp.base_Class.name%]":
      tp.name == "[%=tp.base_Class.name%]" ?
      tp.usecases.map((u) => {
        return "<b>" + u.name + "</b>"  
      }).join("<br>") : ""[%if(hasMore){%],[%}%]
      
    [%}%]
  });
});

new Tabulator("#TouchpointDetail", {
  height: height,
  layout: layout,
  data: touchpointDetailTableData,
  columns:[
    {
      title:"Touchpoint & Case Allocation",
      columns:  touchpoints.map((tp) => {
        return {
          title: tp.name,
          field: tp.name,
          hozAlign: "left",
          headerSort: false,
          headerVertical: false,
          formatter: "html",
          formatterParams: {
            wrap: true
          }
         } 
      })
    }
  ]
});
</script>
</body>
</html>

[%
@cached
function UseCase includedUseCases() : String {
  var inUC = Include.allInstances.select(o|o.eContainer = self).first;
  if (inUC <> null) {
    var uc = inUC.addition;
    return "  {oid: \"" + uc.id + "\", name: \"" + uc.name + "\"},\n" + uc.extendedByUseCases();
  } else {
    return "";
  }
}

@cached
function UseCase extendedByUseCases() : String {
  var ex = Extend.allInstances.select(o|o.extendedCase = self).first;
  if (ex <> null) {
   var uc = ex.eContainer;
   if (uc.type.name = "UseCase") {
     return "  {oid: \"" + uc.id + "\", name: \"" + uc.name + "\"},\n" + uc.extendedByUseCases();
   } else {
     return "";
   }
  } else {
    return "";
  }
}

function Persona getExpectedActors() : Sequence {
  var d = Dependency.all.select(o|o.client.get(0).id = self.base_Actor.id);
  return d.supplier.flatten();
}

function UseCase getDependentServiceResouceActors() : Sequence {
  var d = Dependency.all.select(o|o.client.get(0).id = self.id);
  return d.supplier.flatten();
}


function Persona getFirstStageUseCase() : UseCase {
  var associations : Sequence = Association.allInstances().select(o|o.type.name = "Association");
  var memberEnds : Sequence = associations.memberEnd.flatten();
  var personaAssociatedAssoProp : Property = memberEnds.select(o|o.type = self.base_Actor).first;
  if (personaAssociatedAssoProp <> null) {
    return personaAssociatedAssoProp.eContainer.ownedEnd.select(o|o.type.eClass.name = "UseCase").first.type;
  } else {
    return null;
  }
}            
%]